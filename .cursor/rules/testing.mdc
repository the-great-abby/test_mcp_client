---
description: 
globs: 
alwaysApply: false
---
{section}
----------------
(Add content for this section.)


{section}
----------------
(Add content for this section.)


{section}
----------------
(Add content for this section.)


{section}
----------------
(Add content for this section.)


# Test Execution Standard: `make test`

- **Overview**
  - All tests MUST be run using the `make test` command.
  - Direct invocation of `pytest` or other test runners is NOT supported.
  - This ensures tests run in the correct Docker Compose environment with all dependencies and network isolation.

- **Requirements**
  - Always use `make test` (or other Makefile targets like `make test-unit`, `make test-integration`) to execute tests.
  - Do NOT run `pytest` directly from the CLI, IDE, or scripts.
  - Ensure the Makefile and Docker Compose test environment are up to date and used for all test runs.

- **Examples**
  ```bash
  # ✅ DO: Use Makefile targets
  make test
  make test-unit
  make test-integration

  # ❌ DON'T: Run pytest directly
  pytest
  python -m pytest
  pytest tests/
  ```

- **Best Practices**
  - Use Makefile targets for all test execution to ensure consistent environments.
  - Keep test and development environments isolated.
  - Reference the [pytest_execution.mdc](mdc:.cursor/rules/pytest_execution.mdc) rule for details on Docker Compose and Makefile usage.

- **References**
  - [pytest_execution.mdc](mdc:.cursor/rules/pytest_execution.mdc)
  - [environments.mdc](mdc:.cursor/rules/environments.mdc)
  - [testing_flow.mdc](mdc:.cursor/rules/testing_flow.mdc)

- **TestClient Usage Rule**
  - When using FastAPI's `TestClient` for testing (including WebSocket tests):
    - All test functions MUST be synchronous (`def`, not `async def`).
    - Do NOT use `@pytest.mark.asyncio` on these tests.
    - Use synchronous context managers (e.g., `with client.websocket_connect(...)`).
    - Do NOT use `await` or `async with` with `TestClient`.
  - This ensures compatibility with pytest and FastAPI's synchronous test client.

  **Examples:**
  ```python
  # ✅ DO: Synchronous test function
  def test_websocket_connection(client):
      with client.websocket_connect("/ws") as ws:
          ws.send_json({"type": "ping"})
          msg = ws.receive_json()
          assert msg["type"] == "pong"

  # ❌ DON'T: Async test function with TestClient
  @pytest.mark.asyncio
  async def test_websocket_connection(client):
      async with client.websocket_connect("/ws") as ws:
          await ws.send_json({"type": "ping"})
          msg = await ws.receive_json()
          assert msg["type"] == "pong"
  ```

  - For fully async tests, use `httpx.AsyncClient` and an ASGI transport instead.
