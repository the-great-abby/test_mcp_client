---
description: meta
globs: 
alwaysApply: false
---
{section}
----------------
(Add content for this section.)


{section}
----------------
(Add content for this section.)


{section}
----------------
(Add content for this section.)


{section}
----------------
(Add content for this section.)


# Rule Organization and Maintenance

- **Rule Categories**
  - Core Rules: Fundamental patterns (meta.mdc, cursor_rules.mdc)
  - Language Rules: Language-specific patterns (typescript.mdc, python.mdc)
  - Framework Rules: Framework guidelines (react.mdc, fastapi.mdc)
  - Tool Rules: Development tools (docker.mdc, task_master.mdc)
  - Project Rules: Project conventions (api.mdc, testing.mdc)
  - Operational Rules: System operations (terminal.mdc, testing_flow.mdc)

- **Required Rule Structure**
  ```markdown
  ---
  description: Clear purpose statement
  globs: path/to/files/*.ext
  alwaysApply: boolean
  ---

  # Rule Title

  - **Overview**
    - Purpose and scope
    - When it applies
    - Key principles

  - **Guidelines**
    - Requirements
    - Best practices
    - Anti-patterns

  - **Examples**
    - Good and bad examples
    - Real code references
    - Common scenarios

  - **References**
    - Related documentation
    - Other rules
    - External resources
  ```

- **Rule Maintenance**
  - Monthly review all rules
  - Quarterly review core rules
  - Update on pattern changes
  - Archive obsolete rules
  - Track changes in git
  - Test rules in practice

- **Best Practices**
  - ✅ DO: Keep rules focused
  - ✅ DO: Use real examples
  - ✅ DO: Update regularly
  - ✅ DO: Cross-reference
  - ❌ DON'T: Duplicate info
  - ❌ DON'T: Leave outdated
  - ❌ DON'T: Over-complicate
  - ❌ DON'T: Ignore exceptions

- **Documentation & Cross-Referencing**
  - Use markdown formatting
  - Include code blocks
  - Add file references
  - Maintain versions
  - Document changes
  - Link related rules
  - Reference [ai_pair_programming_workflow.mdc](mdc:.cursor/rules/ai_pair_programming_workflow.mdc) for collaborative session documentation and knowledge capture

- **Operational Guidelines**
  - **Terminal Management**
    - Watch for capital letters at end of command sequences
    - Request Cursor restart when terminal shows signs of corruption
    - Use fresh terminal instances for new command sequences
    - Monitor command output for unusual formatting

  - **Testing Workflow**
    - Utilize Makefile.ai commands for test sequences
    - Leverage AI-optimized commands for faster iterations
    - Follow consistent test-debug-retest patterns
    - Keep test environment clean between runs

  - **Collaboration**
    - For collaborative debugging and development, follow the [AI Pair Programming & Debugging Workflow](mdc:.cursor/rules/ai_pair_programming_workflow.mdc).

# Related Rules
- [ai_pair_programming_workflow.mdc](mdc:.cursor/rules/ai_pair_programming_workflow.mdc) - AI Pair Programming & Debugging Workflow

# Server Memory Export Rule

- **Purpose:**
  - Ensure the project's knowledge graph (server memory) is periodically exported for transparency, team knowledge sharing, and documentation.

- **Export Frequency:**
  - Recommended: After major architectural changes, feature launches, or at least once per development cycle (e.g., weekly or per sprint).
  - Can be automated as a CI/CD or Makefile target.

- **Export Format:**
  - Use Markdown with Mermaid diagrams for maximum compatibility and readability (e.g., `docs/cursor_knowledge_graph.md`).
  - Include all major entities, relationships, and recent observations.

- **Best Practices:**
  - Announce new exports in team channels or PRs.
  - Link exported diagrams in onboarding and architecture docs.
  - Review and update the export process as the project evolves.
  - Ensure exports are versioned or timestamped for historical reference.

- **Example:**
  - See `docs/cursor_knowledge_graph.md` for a sample export.

---
description: Always update the 'Last updated' timestamp in onboarding docs when making changes.
globs:
  - WELCOME.md
  - docs/onboarding.md
  - docs/ai-onboarding.md
alwaysApply: true
---
# Onboarding Docs Last Updated Timestamp Rule

## When to Update
- Any time you make changes to onboarding documentation (WELCOME.md, docs/onboarding.md, docs/ai-onboarding.md), update the 'Last updated' timestamp at the top of the file.

## Required Actions
- Edit the 'Last updated' line to reflect the current date (YYYY-MM-DD).
- Reviewers should check that the timestamp is current for any PR that modifies onboarding docs.

## Checklist for PRs
- [ ] 'Last updated' timestamp is current in all modified onboarding docs.

## Rationale
- Keeps users informed about the freshness of onboarding materials.
- Helps maintainers track when onboarding was last reviewed or improved.

## Example
```
Last updated: 2024-05-08
``` 