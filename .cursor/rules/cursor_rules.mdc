---
description: 
globs: 
alwaysApply: true
---
- **Required Rule Structure**
  - Every rule must start with YAML frontmatter containing:
    ```markdown
    ---
    description: Clear, one-line description
    globs: path/to/files/*.ext
    alwaysApply: boolean
    ---
    ```
  - Main content should use bullet points with bold headers

- **File References**
  - Use `[filename](mdc:path/to/file)` syntax for all file references
  - Example: [schema.prisma](mdc:prisma/schema.prisma)
  - Always use relative paths from workspace root

- **Code Examples**
  ```typescript
  // ✅ DO: Include language-specific code blocks
  const goodExample = () => {
    // Add clear comments
    return true;
  };
  
  // ❌ DON'T: Leave examples without context
  const badExample = false;
  ```

- **Content Guidelines**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Creation/Maintenance**
  - Due to a known Cursor bug, new or updated rules should first be saved as a plain text file (e.g., `NEWRULE.txt`) in the project root.
  - Once the rule content is finalized, move or copy the text file to the appropriate location in `.cursor/rules/` and rename it with a `.mdc` extension.
  - This ensures Cursor recognizes the rule update and avoids caching issues.

  **Example Workflow:**
  ```bash
  # 1. Save your rule as NEWRULE.txt in the project root
  # 2. Move it to the rules directory with the correct name
  mv NEWRULE.txt .cursor/rules/my_new_rule.mdc
  ```

- **Rule Maintenance**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 