[pytest]
addopts = 
    --cov=app
    --cov-report=term-missing
    --cov-report=html
    --cov-fail-under=80
    --verbose
    --junitxml=test-reports/junit.xml

testpaths = tests

markers =
    asyncio: mark test as async
    integration: mark test as integration test
    e2e: mark test as end-to-end test
    real_service: mark test to use real external services (e.g., real Redis, Postgres)
    mock_service: mark test to use mock dependencies (e.g., MockRedis)

# Configure asyncio
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Configure test timeouts
timeout = 300

# Environment variables for tests
env =
    ENVIRONMENT=test
    TESTING=1
    POSTGRES_HOST=db-test
    POSTGRES_PORT=5432
    POSTGRES_DB=test_db
    POSTGRES_USER=postgres
    POSTGRES_PASSWORD=postgres
    REDIS_HOST=redis-test
    REDIS_PORT=6379
    DOCKER_SERVICE_HOST=backend-test
    DOCKER_SERVICE_PORT=8000

# Python files and classes for testing
python_files = test_*.py
python_classes = Test*
python_functions = test_*

log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

[coverage:run]
omit =
    .cursor/rules/*
    ai_assets/*
    NEWRULE.txt
    *.mdc 